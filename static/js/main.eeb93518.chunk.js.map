{"version":3,"sources":["actions/index.js","containers/AddTodo.js","containers/RemoveTodo.js","containers/EditTodo.js","components/ToDo.js","components/Footer.js","components/ToDoList.js","containers/ToDoList.js","components/App.js","serviceWorker.js","reducers/todos.js","reducers/index.js","index.js"],"names":["id","connect","dispatch","useState","input","setInput","disabled","setDisabled","useEffect","className","onSubmit","e","preventDefault","type","text","localStorage","setItem","onChange","target","value","placeholder","icon","faTrashAlt","onClick","deleteTodo","doneEditing","onKeyDown","payload","editTodo","keyCode","defaultValue","ref","Todo","props","state","editing","this","setState","checked","completed","style","textDecoration","React","Component","Footer","addedTodos","TodoList","todos","toggleTodo","console","log","map","todo","key","length","App","Boolean","window","location","hostname","match","action","filter","Object","assign","combineReducers","store","createStore","rootReducer","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eeb93518.chunk.js","sourcesContent":["let id = 0\n\nexport const addTodo = text => ({\n    type: 'ADD_TODO',\n    id: id++,\n    text\n})\n\nexport const deleteTodo = id => ({\n    type: 'DELETE_TODO',\n    id\n})\n\nexport const toggleTodo = id => ({\n    type: 'TOGGLE_TODO',\n    id\n})\nexport const editTodo = (id, text) => ({\n    type: 'EDIT_TODO',\n    payload : {\n        id,\n        text\n    }\n})\n","import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../actions'\n\nconst AddTodo = ({ dispatch }) => {\n    let [input, setInput] = useState('')\n    const [disabled, setDisabled] = useState(true)\n    useEffect(() => {\n        if (input) {\n            setDisabled(false)\n        } else {\n            setDisabled(true)\n        }\n    }, [input]);\n    return (\n        <div className=\"add-todo-container\">\n            <form onSubmit={e => {\n                e.preventDefault();\n                dispatch(addTodo(input))\n                localStorage.setItem('todo', input) //setting in local storage\n                setInput('')\n            }}>\n            <input \n                type=\"text\" \n                onChange={ e => {\n                    setInput(e.target.value)\n                    \n                }} \n                value={input} \n                className=\"add-todo-input\" \n                placeholder=\"what to do?\" \n            />\n            <button type=\"submit\" className=\"add-todo\" disabled={disabled}>\n                Add Todo\n            </button>\n            </form>\n        </div>\n    )\n}\n\nexport default connect()(AddTodo)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { deleteTodo } from '../actions'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nconst DeleteTodo = ({ dispatch, id }) => {\n    return (\n        <FontAwesomeIcon className=\"delete-todo\" icon={faTrashAlt} onClick={\n\t\t\te => {\n\t\t\t\te.preventDefault()\n\t\t\t\tdispatch(deleteTodo(id))\n\t\t\t}\n\t\t} />\n    )\n}\n\nexport default connect()(DeleteTodo)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { editTodo } from '../actions'\n\nconst EditTodo = ({dispatch, id, text, doneEditing}) => {\n    let input \n    return(\n        <input \n            className=\"edit-todo todo\" \n            onKeyDown={ (e) =>{ \n                dispatch(editTodo(id, input.value))\n                if(e.keyCode === 13)\n                    doneEditing();\n            } }\n            defaultValue={text} \n            ref={value => input = value}\n        />\n    )\n}\n\nexport default connect()(EditTodo)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DeleteTodo from '../containers/RemoveTodo'\nimport EditTodo from '../containers/EditTodo'\n\nclass Todo extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\tediting: false\n\t\t}\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div >\n\t\t\t\t{!this.state.editing ? \n\t\t\t\t\t<div className=\"todo\">\n\t\t\t\t\t\t<input type=\"checkbox\" checked={this.props.completed} onChange={this.props.onChange} />\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonClick={ ()=>{this.setState({editing: true})} }\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\ttextDecoration: this.props.completed ? 'line-through' : 'none'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tclassName='todo-item'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.props.text}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<DeleteTodo id={this.props.id} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t: <EditTodo\n\t\t\t\t\t\tid={this.props.id}\n\t\t\t\t\t\ttext={this.props.text}\n\t\t\t\t\t\tdoneEditing={()=>this.setState({editing: false})}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nTodo.propTypes = {\n\tcompleted: PropTypes.bool.isRequired,\n\ttext: PropTypes.string.isRequired\n}\n\nexport default Todo","import React from 'react'\n\nconst Footer = ({addedTodos}) => {\n    \n    return(\n        <div>\n            <h3>Currently added tasks: {addedTodos} </h3>\n            <div>• Check the box to complete a task.</div>\n            <div>• Click on a task to edit it</div>\n        </div>\n    )\n}\n\nexport default Footer","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './ToDo'\nimport Footer from '../components/Footer'\n\nconst TodoList = ({ todos, toggleTodo }) => (\n  <div>\n    {console.log(todos)}\n    {todos.map(todo =>\n      <Todo\n        key={todo.id}\n        {...todo}\n        onChange={() => toggleTodo(todo.id)}\n      />\n    )}\n    <Footer addedTodos={todos.length} />\n  </div>\n)\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired,\n  toggleTodo: PropTypes.func.isRequired\n}\n\nexport default TodoList","import { connect } from 'react-redux'\nimport { toggleTodo } from '../actions'\nimport TodoList from '../components/ToDoList'\n\nconst getTodos = (todos) => {\n  return todos\n}\n\nconst mapStateToProps = state => ({\n  todos: getTodos(state.todos)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTodo: id => dispatch(toggleTodo(id))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)","import React from 'react'\nimport AddTodo from '../containers/AddTodo'\nimport ToDoList from '../containers/ToDoList'\n\n\nconst App = () => (\n  <div className=\"todo-app-container\">\n    <h1>To Do App</h1>\n    <AddTodo />\n    <ToDoList />\n  </div>\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const todos = (state = [], action) => {\n    switch (action.type) {\n        case 'ADD_TODO':\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    text: action.text,\n                    completed: false\n                }\n            ]\n            \n        case 'DELETE_TODO':\n            return state.filter(todo => todo.id !== action.id);  \n\n        case 'TOGGLE_TODO':\n            return state.map(todo =>\n            (todo.id === action.id)\n            ? {...todo, completed: !todo.completed}\n            : todo\n        )\n\n        case 'EDIT_TODO' :\n            return state.map(todo => todo.id === action.payload.id ?\n                Object.assign({}, todo, action.payload) : todo );\n\n        default:\n            return state\n    }\n}\n  \nexport default todos","import { combineReducers } from 'redux'\nimport todos from './todos'\n\nexport default combineReducers({\n  todos,\n})","import React from 'react';\nimport { render } from 'react-dom'\nimport './index.css';\nimport App from './components/App';\nimport { createStore } from 'redux'\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers'\nimport { Provider } from 'react-redux'\n\nconst store = createStore(rootReducer)\n\nrender(\n  \t<Provider store={store}>\n      \t<App />\n  \t</Provider>,\n  \tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}